{"version":3,"sources":["components/Icons.js","App.js","serviceWorker.js","index.js"],"names":["Icons","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","ChangeItem","itemNumber","toast","type","i","checkIsWinner","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,EAXD,SAAC,GACP,OADkB,EAAVC,MAEJ,IAAK,SACD,OAAO,cAAC,IAAD,CAAaC,UAAU,SAClC,IAAK,QACD,OAAO,cAAC,IAAD,CAASA,UAAU,SAC9B,QACI,OAAO,cAAC,IAAD,CAAOA,UAAU,W,+DCFlCC,G,YAAW,IAAIC,MAAM,GAAGC,KAAK,UAuFpBC,EArFH,WAEV,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAiCMC,EAAa,SAAAC,GACjB,OAAGH,EACMI,YAAMJ,EAAY,CAACK,KAAO,YAER,UAAxBZ,EAAUU,GAKJC,YAAM,iBAAkB,CAACC,KAAM,WAJtCZ,EAAUU,GAAcL,EAAU,QAAU,SAC5CC,GAAYD,QAhCM,WAGpB,IAAI,IAAIQ,EAAE,EAAEA,EAAE,EAAEA,GAAG,EAEdb,EAAUa,KAAOb,EAAUa,EAAE,IAAMb,EAAUa,KAAOb,EAAUa,EAAE,IAAuB,UAAjBb,EAAUa,IAEjFL,EAAc,GAAD,OAAIR,EAAUa,GAAd,UAGjB,IAAIA,EAAE,EAAEA,EAAE,EAAEA,IAEPb,EAAUa,KAAOb,EAAUa,EAAE,IAAMb,EAAUa,KAAOb,EAAUa,EAAE,IAAuB,UAAjBb,EAAUa,IAEjFL,EAAc,GAAD,OAAIR,EAAUa,GAAd,UAGdb,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAuB,UAAjBA,EAAU,IAE7EQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAEZA,EAAU,KAAOA,EAAU,IAAMA,EAAU,KAAOA,EAAU,IAAuB,UAAjBA,EAAU,IAE7EQ,EAAc,GAAD,OAAIR,EAAU,GAAd,UAefc,KAGF,OACE,eAACC,EAAA,EAAD,CAAWhB,UAAU,MAArB,UACE,cAAC,IAAD,CAAgBiB,SAAS,kBACzB,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAGpB,UAAU,cAAtB,UACCQ,EACC,sBAAKR,UAAU,YAAf,UACE,oBAAIA,UAAU,0CAAd,SACGQ,IAEH,cAACa,EAAA,EAAD,CAAQC,MAAM,UAAUC,OAAK,EAACC,QAxDrB,WACjBjB,GAAW,GACXE,EAAc,IACdR,EAAUE,KAAK,QAAQ,EAAE,IAqDjB,gCAIF,qBAAIH,UAAU,2BAAd,UACGM,EAAU,QAAU,SADvB,YAIF,qBAAKN,UAAU,OAAf,SACKC,EAAUwB,KAAK,SAACC,EAAMC,GAAP,OACd,cAACC,EAAA,EAAD,CAAMJ,QAAW,kBAAMd,EAAWiB,IAAlC,SACE,cAACE,EAAA,EAAD,CAAU7B,UAAU,MAApB,SACE,cAAC,EAAD,CAAOD,KAAM2B,sBCvEXI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c4f8040.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {FaTimes, FaPen, FaRegCircle} from \"react-icons/fa\";\r\n\r\nconst Icons = ({name}) => {\r\n        switch (name) {\r\n            case 'circle':\r\n                return <FaRegCircle className=\"icon\"/>;\r\n            case 'cross':\r\n                return <FaTimes className=\"icon\"/>;\r\n            default:\r\n                return <FaPen className=\"icon\"/>;\r\n        }\r\n};\r\n\r\nexport default Icons;","import React, { useState } from 'react';\nimport Icons from './components/Icons';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport {Card, CardBody, Container, Button, Col, Row} from \"reactstrap\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nconst itemArray= new Array(9).fill(\"empty\");\n\nconst App = () =>  {\n\n  const [isCross, setIsCross] = useState(false)\n  const [winMessage, setWinMessage] = useState(\"\");\n   \n  const reloadGame = () => {\n    setIsCross(false)\n    setWinMessage(\"\")\n    itemArray.fill(\"empty\",0,9)\n  }\n  const checkIsWinner = () =>{\n\n\n    for(var i=0;i<9;i+=3)\n    {\n      if(itemArray[i] === itemArray[i+1] && itemArray[i] === itemArray[i+2] && itemArray[i] !== \"empty\")\n      {\n        setWinMessage(`${itemArray[i]} wins`)\n      }\n    }\n    for(i=0;i<3;i++)\n    {\n      if(itemArray[i] === itemArray[i+3] && itemArray[i] === itemArray[i+6] && itemArray[i] !== \"empty\")\n      {\n        setWinMessage(`${itemArray[i]} wins`)\n      }\n    }\n    if(itemArray[0] === itemArray[4] && itemArray[0] === itemArray[8] && itemArray[0] !== \"empty\")\n    {\n      setWinMessage(`${itemArray[0]} wins`)\n    }\n    if(itemArray[2] === itemArray[4] && itemArray[2] === itemArray[6] && itemArray[2] !== \"empty\")\n    {\n      setWinMessage(`${itemArray[2]} wins`)\n    }\n  }\n  const ChangeItem = itemNumber =>{\n    if(winMessage){\n      return toast(winMessage, {type : \"success\"})\n    }\n    if(itemArray[itemNumber]===\"empty\"){\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\"\n      setIsCross(!isCross);\n    }\n    else{\n      return toast(\"already filled\", {type: \"error\"})\n    }\n\n    checkIsWinner();\n  };\n\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\"/>\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n        {winMessage ? (\n          <div className=\"mb-2 mt-2\">\n            <h1 className=\"text-success text-uppercase text-center\">\n              {winMessage}\n            </h1>\n            <Button color=\"success\" block onClick={reloadGame}>\n            Reload the Game</Button>\n          </div>\n        ) : (\n          <h1 className=\"text-center text-warning\">\n            {isCross ? \"Cross\" : \"Circle\"} turns\n          </h1>\n        ) }  \n        <div className=\"grid\">\n            {itemArray.map( (item, index) => (\n              <Card onClick= { () => ChangeItem(index) }>\n                <CardBody className=\"box\">\n                  <Icons name={item}/>\n                </CardBody>\n              </Card>\n            ) )}\n          </div>\n        </Col>\n      </Row>\n      \n    </Container>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}